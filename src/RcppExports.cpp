// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// linear_interpolation_cpp
NumericVector linear_interpolation_cpp(List x_r, NumericVector y, List xout_r, int rule, bool verbose);
RcppExport SEXP _mapprox_linear_interpolation_cpp(SEXP x_rSEXP, SEXP ySEXP, SEXP xout_rSEXP, SEXP ruleSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type xout_r(xout_rSEXP);
    Rcpp::traits::input_parameter< int >::type rule(ruleSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_interpolation_cpp(x_r, y, xout_r, rule, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mapprox_linear_interpolation_cpp", (DL_FUNC) &_mapprox_linear_interpolation_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_mapprox(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
